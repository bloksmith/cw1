# Generated by Django 4.2.11 on 2024-06-14 12:05

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('quantumapp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TokenPair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default Token Pair Name', max_length=255)),
                ('token1_symbol', models.CharField(default='TKN1', max_length=10)),
                ('token2_symbol', models.CharField(default='TKN2', max_length=10)),
                ('token1_address', models.CharField(default='0x0000000000000000000000000000000000000000', max_length=42)),
                ('token2_address', models.CharField(default='0x0000000000000000000000000000000000000000', max_length=42)),
                ('from_token', models.CharField(help_text='Address of the from token', max_length=42)),
                ('to_token', models.CharField(help_text='Address of the to token', max_length=42)),
                ('active', models.BooleanField(default=True, help_text='Is the token pair actively traded?')),
                ('trading_enabled', models.BooleanField(default=True, help_text='Can actual buy/sell operations be performed?')),
                ('buy_token', models.CharField(default='0x0000000000000000000000000000000000000000', help_text='Token address for buying', max_length=42)),
                ('sell_token', models.CharField(default='0x0000000000000000000000000000000000000000', help_text='Token address for selling', max_length=42)),
                ('sell_to_address', models.CharField(default='0x826c533770B4Bc53aa6dA31747113595e0032567', help_text='Address to send tokens when selling', max_length=42)),
                ('buy_to_address', models.CharField(default='0x826c533770B4Bc53aa6dA31747113595e0032567', help_text='Address to send tokens when buying', max_length=42)),
                ('sell_transaction_data', models.TextField(blank=True, default='function_data', help_text='Transaction data for selling')),
                ('buy_transaction_data', models.TextField(blank=True, help_text='Transaction data for buying', null=True)),
                ('use_deep_learning', models.BooleanField(default=False, help_text='Use deep learning models for this pair?')),
                ('buy_signal', models.BooleanField(default=False, help_text='Indicator for a buy signal')),
                ('sell_signal', models.BooleanField(default=False, help_text='Indicator for a sell signal')),
                ('sentiment_score', models.FloatField(default=0.0, help_text='Sentiment score from analysis')),
                ('sentiment_summary', models.TextField(blank=True, help_text='Summary of the sentiment analysis')),
                ('risk_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], default='UNKNOWN', help_text='Risk level from the latest analysis', max_length=10)),
                ('last_analyzed', models.DateTimeField(auto_now=True)),
                ('buy_small_amount', models.BooleanField(default=False, help_text='Always buy a small amount regardless of other indicators for cStables/DAI')),
                ('token11_network', models.CharField(choices=[('ETH_MAINNET', 'Ethereum Mainnet'), ('ETH_SEPOLIA', 'Ethereum Sepolia'), ('ARBITRUM', 'Arbitrum'), ('AVALANCHE', 'Avalanche'), ('BASE', 'Base'), ('BSC', 'Binance Smart Chain'), ('CELO', 'Celo'), ('FANTOM', 'Fantom'), ('OPTIMISM', 'Optimism'), ('POLYGON', 'Polygon')], default='POLYGON', help_text='Blockchain network for token1', max_length=20)),
                ('token22_network', models.CharField(choices=[('ETH_MAINNET', 'Ethereum Mainnet'), ('ETH_SEPOLIA', 'Ethereum Sepolia'), ('ARBITRUM', 'Arbitrum'), ('AVALANCHE', 'Avalanche'), ('BASE', 'Base'), ('BSC', 'Binance Smart Chain'), ('CELO', 'Celo'), ('FANTOM', 'Fantom'), ('OPTIMISM', 'Optimism'), ('POLYGON', 'Polygon')], default='POLYGON', help_text='Blockchain network for token2', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='TokenQuote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_token', models.CharField(max_length=42)),
                ('to_token', models.CharField(max_length=42)),
                ('price', models.DecimalField(decimal_places=10, max_digits=20)),
                ('gross_price', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('estimated_price_impact', models.CharField(max_length=100, null=True)),
                ('gas_price', models.BigIntegerField(null=True)),
                ('gas_used', models.BigIntegerField(null=True)),
                ('sources', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField()),
                ('amount', models.DecimalField(decimal_places=10, default=None, max_digits=20, null=True)),
                ('upper_band', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('lower_band', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('rsi', models.DecimalField(decimal_places=4, max_digits=10, null=True)),
                ('macd', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('rsi_sma', models.DecimalField(decimal_places=4, max_digits=10, null=True)),
                ('signal_line', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('fibonacci_retracement', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('impulse_macd', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('buy_signal', models.BooleanField(default=False)),
                ('sell_signal', models.BooleanField(default=False)),
                ('sentiment_score', models.FloatField(default=0.0, help_text='Sentiment score from analysis')),
                ('sentiment_summary', models.TextField(blank=True, help_text='Summary of the sentiment analysis')),
                ('risk_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], default='UNKNOWN', help_text='Risk level from the latest analysis', max_length=10)),
                ('last_analyzed', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp of the last analysis')),
                ('volatility', models.FloatField(default=0.0)),
                ('price_difference', models.FloatField(default=0.0)),
                ('realized_profit', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
            ],
        ),
    ]
