# Generated by Django 4.2.14 on 2024-07-12 13:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import quantumapp.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash', models.CharField(max_length=64, unique=True)),
                ('previous_hash', models.CharField(max_length=64)),
                ('timestamp', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=42)),
                ('abi', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, unique=True)),
                ('public_key', models.TextField()),
                ('last_seen', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Peer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255)),
                ('peer_id', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Pool',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('hashrate', models.FloatField(default=0.0)),
                ('rewards', models.FloatField(default=0.0)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Shard',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='TokenPair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default Token Pair Name', max_length=255)),
                ('token1_symbol', models.CharField(default='TKN1', max_length=10)),
                ('token2_symbol', models.CharField(default='TKN2', max_length=10)),
                ('token1_address', models.CharField(default='0x0000000000000000000000000000000000000000', max_length=42)),
                ('token2_address', models.CharField(default='0x0000000000000000000000000000000000000000', max_length=42)),
                ('from_token', models.CharField(help_text='Address of the from token', max_length=42)),
                ('to_token', models.CharField(help_text='Address of the to token', max_length=42)),
                ('active', models.BooleanField(default=True, help_text='Is the token pair actively traded?')),
                ('trading_enabled', models.BooleanField(default=True, help_text='Can actual buy/sell operations be performed?')),
                ('buy_token', models.CharField(default='0x0000000000000000000000000000000000000000', help_text='Token address for buying', max_length=42)),
                ('sell_token', models.CharField(default='0x0000000000000000000000000000000000000000', help_text='Token address for selling', max_length=42)),
                ('sell_to_address', models.CharField(default='0x826c533770B4Bc53aa6dA31747113595e0032567', help_text='Address to send tokens when selling', max_length=42)),
                ('buy_to_address', models.CharField(default='0x826c533770B4Bc53aa6dA31747113595e0032567', help_text='Address to send tokens when buying', max_length=42)),
                ('sell_transaction_data', models.TextField(blank=True, default='function_data', help_text='Transaction data for selling')),
                ('buy_transaction_data', models.TextField(blank=True, help_text='Transaction data for buying', null=True)),
                ('use_deep_learning', models.BooleanField(default=False, help_text='Use deep learning models for this pair?')),
                ('buy_signal', models.BooleanField(default=False, help_text='Indicator for a buy signal')),
                ('sell_signal', models.BooleanField(default=False, help_text='Indicator for a sell signal')),
                ('sentiment_score', models.FloatField(default=0.0, help_text='Sentiment score from analysis')),
                ('sentiment_summary', models.TextField(blank=True, help_text='Summary of the sentiment analysis')),
                ('risk_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], default='UNKNOWN', help_text='Risk level from the latest analysis', max_length=10)),
                ('last_analyzed', models.DateTimeField(auto_now=True)),
                ('buy_small_amount', models.BooleanField(default=False, help_text='Always buy a small amount regardless of other indicators for cStables/DAI')),
                ('token11_network', models.CharField(choices=[('ETH_MAINNET', 'Ethereum Mainnet'), ('ETH_SEPOLIA', 'Ethereum Sepolia'), ('ARBITRUM', 'Arbitrum'), ('AVALANCHE', 'Avalanche'), ('BASE', 'Base'), ('BSC', 'Binance Smart Chain'), ('CELO', 'Celo'), ('FANTOM', 'Fantom'), ('OPTIMISM', 'Optimism'), ('POLYGON', 'Polygon')], default='POLYGON', help_text='Blockchain network for token1', max_length=20)),
                ('token22_network', models.CharField(choices=[('ETH_MAINNET', 'Ethereum Mainnet'), ('ETH_SEPOLIA', 'Ethereum Sepolia'), ('ARBITRUM', 'Arbitrum'), ('AVALANCHE', 'Avalanche'), ('BASE', 'Base'), ('BSC', 'Binance Smart Chain'), ('CELO', 'Celo'), ('FANTOM', 'Fantom'), ('OPTIMISM', 'Optimism'), ('POLYGON', 'Polygon')], default='POLYGON', help_text='Blockchain network for token2', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='TokenQuote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_token', models.CharField(max_length=42)),
                ('to_token', models.CharField(max_length=42)),
                ('price', models.DecimalField(decimal_places=10, max_digits=20)),
                ('gross_price', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('estimated_price_impact', models.CharField(max_length=100, null=True)),
                ('gas_price', models.BigIntegerField(null=True)),
                ('gas_used', models.BigIntegerField(null=True)),
                ('sources', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField()),
                ('amount', models.DecimalField(decimal_places=10, default=None, max_digits=20, null=True)),
                ('upper_band', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('lower_band', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('rsi', models.DecimalField(decimal_places=4, max_digits=10, null=True)),
                ('macd', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('rsi_sma', models.DecimalField(decimal_places=4, max_digits=10, null=True)),
                ('signal_line', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('fibonacci_retracement', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('impulse_macd', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
                ('buy_signal', models.BooleanField(default=False)),
                ('sell_signal', models.BooleanField(default=False)),
                ('sentiment_score', models.FloatField(default=0.0, help_text='Sentiment score from analysis')),
                ('sentiment_summary', models.TextField(blank=True, help_text='Summary of the sentiment analysis')),
                ('risk_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], default='UNKNOWN', help_text='Risk level from the latest analysis', max_length=10)),
                ('last_analyzed', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp of the last analysis')),
                ('volatility', models.FloatField(default=0.0)),
                ('price_difference', models.FloatField(default=0.0)),
                ('realized_profit', models.DecimalField(decimal_places=10, max_digits=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash', models.CharField(max_length=255, unique=True)),
                ('amount', models.FloatField()),
                ('fee', models.FloatField(default=0.0)),
                ('feev2', models.FloatField(default=0.0)),
                ('signature', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_mining_reward', models.BooleanField(default=False)),
                ('batch_processed', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_key', models.TextField()),
                ('private_key', models.TextField()),
                ('alias', models.SlugField(blank=True, max_length=255, unique=True)),
                ('address', models.CharField(max_length=42, unique=True)),
                ('balance', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('contribution', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('encrypted_private_key', models.BinaryField(default=b'')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionParent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_links', to='quantumapp.transaction')),
                ('parent', models.ForeignKey(default=quantumapp.models.get_default_transaction, on_delete=django.db.models.deletion.CASCADE, related_name='parent_links', to='quantumapp.transaction')),
            ],
        ),
        migrations.CreateModel(
            name='TransactionMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=100)),
                ('metadata', models.TextField()),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='quantumapp.transaction')),
            ],
        ),
        migrations.AddField(
            model_name='transaction',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_received', to='quantumapp.wallet'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_sent', to='quantumapp.wallet'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='shard',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='quantumapp.shard'),
        ),
        migrations.CreateModel(
            name='PoolMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('pool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quantumapp.pool')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PendingTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=8, max_digits=20)),
                ('fee', models.DecimalField(decimal_places=8, max_digits=20)),
                ('hash', models.CharField(max_length=256, unique=True)),
                ('signature', models.CharField(max_length=256)),
                ('is_approved', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pending_transactions_received', to='quantumapp.wallet')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pending_transactions_sent', to='quantumapp.wallet')),
                ('shard', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='quantumapp.shard')),
            ],
        ),
        migrations.CreateModel(
            name='Miner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_capability', models.IntegerField(default=1)),
                ('contribution', models.FloatField(default=0)),
                ('reward', models.FloatField(default=0)),
                ('tasks_assigned', models.IntegerField(default=0)),
                ('tasks_completed', models.IntegerField(default=0)),
                ('task_completion_times', models.JSONField(default=list)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, unique=True)),
                ('symbol', models.CharField(max_length=10)),
                ('balance', models.DecimalField(decimal_places=0, default=0, max_digits=20)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('total_supply', models.DecimalField(decimal_places=0, default=0, max_digits=20)),
                ('wallet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='quantumapp.wallet')),
            ],
        ),
        migrations.CreateModel(
            name='CompletedTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=8, max_digits=18)),
                ('fee', models.DecimalField(decimal_places=8, max_digits=18)),
                ('hash', models.CharField(max_length=64, unique=True)),
                ('signature', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completed_transactions_received', to='quantumapp.wallet')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completed_transactions_sent', to='quantumapp.wallet')),
            ],
        ),
    ]
